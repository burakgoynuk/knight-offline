//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : 443-Hw1
//  @ File Name : Simulation.java
//  @ Date : 08.04.2015
//  @ Author : Burak Goynuk
//
//

//package pkg443.hw1;

import java.util.ArrayList;
import java.util.Random             ;
import java.awt.image.BufferedImage ;
import javax.swing.JFrame ;


import java.io.File                 ;
import java.awt.Color               ;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.Timer;
import javax.imageio.ImageIO        ;
import javax.swing.AbstractAction;

public class Simulation {
	
    // Manual
    public static Simulation simulation;
    public static Display display;
    public static Random  random;



    // From UML
    public static int windowWidth = 1050;
    public static int windowHeight = 550;
    
    public static int eInitial = 8;
   // public static int eCurrent = 0;
    public int eRouge = 0;
    public int eMage = 0;
    public int ePriest = 0;
    public int eKills = 0;
    public int eDamage = 0;
    public int eScore = 0;
    
    
    public static int kInitial = 8;
    //public static int kCurrent = 0;
    public int kRouge = 0;
    public int kMage = 0;
    public int kPriest = 0;
    public int kKills = 0;
    public int kDamage = 0;
    public int kScore = 0;
    
    public static ArrayList<Knight> knightList;
    public static ArrayList<Knight> elMoradList;
    public static ArrayList<Knight> kaurusList;
    /*
    public int randomSpeedBase = 7;
    public int randomSpeedVariation = 5;
    

    public int randomRadiusBase = 75;
    public int randomRadiusVariation = 50;
    
    //public boolean drawLogos = true;*/
    public static int infoPanelWidth = 320;
    public static int shapeSize = 35;
  
    public static int healthMage = 400;
    public static int healthPriest = 350;
    public static int healthRouge = 500;
    
    public static int speedMage = 75/10;
    public static int speedPriest = 50/10;
    public static int speedRouge = 100/10;
    
    public static int normalAttackMage = 100;
    public static int normalAttackPriest = 150;
    public static int normalAttackRouge = 150;
    
    public static int specAttackMage = 0;
    public static int specAttackPriest = 0;
    public static int specAttackRouge = 0;
    
    public static int specRangeMage = 0;
    public static int specRangePriest = 0;
    public static int specRangeRouge = 0;
    
    public static int currentKnightId = 0;
    
    // Coordinates to produce Knights
    public static double topLeftX = infoPanelWidth + 10;
    public static double topLeftY = 10;

    public static double topRightX = windowWidth - 40;
    public static double topRightY = 10;

    public static double bottomLeftX = infoPanelWidth + 10;
    public static double bottomLeftY = windowHeight - 40;

    public static double bottomRightX = windowWidth - 40;
    public static double bottomRightY = windowHeight - 40;

    
    public BufferedImage     logoKnight ;
    public BufferedImage     background ;
    
    public int sleepTime = 400;
    public double deltaTime = 0.4;    
    
    
   public  Simulation() throws Exception
    {
		random = new Random() ;
		knightList = new ArrayList<Knight>() ;
		elMoradList = new ArrayList<Knight>();
                kaurusList = new ArrayList<Knight>();
                
                try {
                    logoKnight  = ImageIO.read( new File("logo.jpg") ) ;
		} catch (IOException e) {
                    e.printStackTrace();
		}
                        
                try {
                    background  = ImageIO.read( new File("back.jpg"  ) ) ;
		} catch (IOException e) {
                    e.printStackTrace();
		}
		
    } 

    
   // create one instance of knight
   // random type - random location
   // teamNo 0 -> el morad
   // teamNo 1 -> kaurus
   public static void createOneKnight(int teamNo){
       /* added variables to knight */
        int hitP = 0;
        Timer coolDownT = null;
        int scoreAdded = 0;
        double x = 70;
        double y = 70;
        double speedAdded = 0;
        int health = 0;
        int normalAttack = 0;
        int specAttack = 0;
        
        SoldierFactory sf = null;
         
        /*
            Place choose for knights
            0 -> left
            1 -> right
        */
        int choosePlace = 0;
        
        /*
            Type choose for knights
            0 -> priest
            1 -> mage
            2 -> rouge
        */
        int chooseType = 0;
    
        if ( teamNo == 0 )
        {
            choosePlace = random.nextInt(2);
            chooseType = random.nextInt(3);
            
            
            x = topRightX;
            y = topRightY;
            
            if ( chooseType == 0 ){
                sf = new PriestFactory();
                health = healthPriest;
                speedAdded = speedPriest;
                normalAttack = normalAttackPriest;
                specAttack = specAttackPriest;
            }
            
            else if ( chooseType == 1 ){
                sf = new MageFactory();
                health = healthMage;
                speedAdded = speedMage;
                normalAttack = normalAttackMage;
                specAttack = specAttackMage;
            }
            
            else if ( chooseType == 2 ){
                sf = new RogueFactory();
                health = healthRouge;
                speedAdded = speedRouge;
                normalAttack = normalAttackRouge;
                specAttack = specAttackRouge;
            }
            Knight k = sf.produce( hitP, coolDownT, scoreAdded, x, y, speedAdded, health, normalAttack, specAttack, simulation );
            k.colorKnight = Color.BLUE;
            k.knightId = currentKnightId;
            currentKnightId += 1;
            elMoradList.add(k);
            knightList.add(k);
            //eCurrent += 1;
        }
        
        else if ( teamNo == 1 )
        {
            choosePlace = random.nextInt(2);
            chooseType = random.nextInt(3);

            
            x = bottomLeftX;
            y = bottomLeftY;
            
            if ( chooseType == 0 ){
                sf = new PriestFactory();
                health = healthPriest;
                speedAdded = speedPriest;
                normalAttack = normalAttackPriest;
                specAttack = specAttackPriest;
            }
            
            else if ( chooseType == 1 ){
                sf = new MageFactory();
                health = healthMage;
                speedAdded = speedMage;
                normalAttack = normalAttackMage;
                specAttack = specAttackMage;
            }
            
            else if ( chooseType == 2 ){
                sf = new RogueFactory();
                health = healthRouge;
                speedAdded = speedRouge;
                normalAttack = normalAttackRouge;
                specAttack = specAttackRouge;
            }
            Knight k = sf.produce( hitP, coolDownT, scoreAdded, x, y, speedAdded, health, normalAttack, specAttack, simulation  );
            k.colorKnight = Color.RED;
            k.knightId = currentKnightId;
            currentKnightId += 1;
            kaurusList.add(k);
            knightList.add(k);
            //kCurrent += 1;
            
        }
    }
   
   
    public static void createKnights(){
        
        /* Creating El-Morad Members */
        /* El-Morads are on the top! */
        for ( int i=0; i<eInitial; i++ ){ 
           createOneKnight(0);
        }
        
        for ( int i=0; i<kInitial; i++ ){
            createOneKnight(1);   
        }
        
                
    }    
        
        
    public static void main(String[] args) throws Exception {
            
            simulation = new Simulation()             ;
            display    = new Display   ( simulation ) ;
            
            createKnights();
       
            
		
            JFrame frame = new JFrame( " KO " ) ;
		
            frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ) ;
            frame.add( display )                                   ;
            frame.pack()                                           ;
            frame.setVisible( true )                               ;

        
        ActionListener allSteps = new AbstractAction() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {

                simulation.stepAll()                ;
                simulation.arrangeDecorators();
                display.repaint()                   ;
            }
        };
        
        ActionListener attackAndStrategeySet = new AbstractAction() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                
                try
                {  
                    
                    if (knightList.size() == 16)
                    {
                        
                        for (int i = 0; i < knightList.size(); i++)
                        {
                            int chooseAttack = random.nextInt(5);
                            knightList.get(i).attack( chooseAttack );
                            setStrategy( knightList.get(i) );    
                        }
                    }
                }
                catch(Exception ex)
                {
                    //System.out.println(ex);
                }    
            }
        };
        
        display.displayTimer = new Timer(100, allSteps)   ;
        display.displayTimer.start()                     ;
        
 
        Knight.coolDown = new Timer(1000, attackAndStrategeySet);
        Knight.coolDown.start()                     ;
        
        
        
        
        java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher
	    (
	      new java.awt.KeyEventDispatcher()
	      {
	        @Override
	        public boolean dispatchKeyEvent ( java.awt.event.KeyEvent event )
	        {
	          String key = javax.swing.KeyStroke.getKeyStrokeForEvent(event).toString() ;
                    
                  if ( key.equals( "pressed P" ) )  
	          	  { 
	        	  	//System.out.println("P");
                          display.displayTimer.stop();
                          Knight.coolDown.stop();
	        	  return true ; 
	          }
                  if ( key.equals( "pressed C" ) )  
	          { 
	        	  //System.out.println("C");
                          display.displayTimer.start(); 
                          Knight.coolDown.start();
	        	  return true ; 
                  }
	          if ( key.equals( "pressed E" ) )  
                  {
                      //System.out.println("E"); 
                      System.exit(0);  
                      return true ; 
                  }
	          
	          return false ;
	        }
	      }
	    ) ;
            
    
    }
    
    public static void setStrategy(Knight k1){
        int strategyChoice = Simulation.random.nextInt(4);
            if ( strategyChoice == 0 )
            {
                k1.strategy = new AttackClosest(k1);
            }
            else if ( strategyChoice == 1 )
            {
                k1.strategy = new AttackWeakest(k1);
            }
            else if ( strategyChoice == 2 )
            {
                k1.strategy = new RandomMove();
            }
            else if ( strategyChoice == 3 )
            {
                k1.strategy = new AttackSlowest(k1);
            }
            else{
            
            }
    }
    public void addListsDecorator( int i, Knight addedKnight, int knightId, Color colorKnight )
    {
        if ( colorKnight == Color.RED )
        {
                for ( int j = 0; j<kaurusList.size(); j++ )
                {
                    if ( kaurusList.get(j).knightId == knightId )
                    {
                        kaurusList.set( j , addedKnight );
                        break;
                    }        
                }    
        }
        if ( colorKnight == Color.BLUE )
        {
            for ( int j = 0; j<elMoradList.size(); j++ )
            {
                if ( elMoradList.get(j).knightId == knightId )
                {
                    elMoradList.set( j , addedKnight );
                    break;
                }        
            }
        }
        knightList.set( i , addedKnight ) ;
    
    }
    
    
    
    public void arrangeDecorators(){
        
        //System.out.println("Decorators Start!");
        for ( int i = 0 ; i < knightList.size() ; i++ )
        {  
            Knight k = knightList.get( i ) ;
            if(k != null)
            {	
                if (k instanceof Knight)  
                {
                    
                    Knight addedKnight = knightList.get(i);
                    Color colorKnight = k.colorKnight;    
                    int knightId = k.knightId;
                    
                    if(k.score >= 0 && k.score <= 75){ 
                        
                        if ( k instanceof Noob) {
                        
                        
                        }
                        else if ( k instanceof Grade3) {
                            addedKnight = new Noob(k);
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        }
                        else if ( k instanceof Grade2) {
                            addedKnight = new Noob(k);
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        }
                        else if ( k instanceof Grade1) {
                            addedKnight = new Noob(k);
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        }
                        else {
                            addedKnight = new Noob(k);
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        
                        }

                    } 
                    
                    
                    else if(k.score > 75 && k.score < 150) { 
                        
                        if ( k instanceof Noob) {
                            addedKnight = new Grade3(k);
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        
                        }
                        else if ( k instanceof Grade3) {
                            
                        }
                        else if ( k instanceof Grade2) {
                            addedKnight = new Grade3(new Noob(k));
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        }
                        else if ( k instanceof Grade1) {
                            addedKnight = new Grade3(new Noob(k));
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        }

                        
                    }
                    
                    if(k.score >= 150 && k.score < 300) { 
                        
                        if ( k instanceof Noob) {
                            addedKnight = new Grade2(new Grade3(k));
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        
                        }
                        else if ( k instanceof Grade3) {
                            addedKnight = new Grade2(k);
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        }
                        else if ( k instanceof Grade2) {
                            
                        }
                        else if ( k instanceof Grade1) {
                            addedKnight = new Grade2(new Grade3(new Noob(k)));
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        }

                   }
                  
                    if(k.score >= 300) { 
                        
                        if ( k instanceof Noob) {
                            addedKnight = new Grade1(new Grade2(new Grade3(k)));
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        
                        }
                        if ( k instanceof Grade3) {
                            addedKnight = new Grade1(new Grade2(k));
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        }
                        if ( k instanceof Grade2) {
                            addedKnight = new Grade1(k);
                            addListsDecorator( i, addedKnight, knightId, colorKnight );
                        }
                        if ( k instanceof Grade1) {
                            
                        }
                        
                        

                        }
                    }

            }
        }
        //System.out.println("Decorators End!");
        
    }
    
    public void stepAll() {
        
        if ( elMoradList.size() < 8 )
        {
            createOneKnight(0);
            
        }
        
        if ( kaurusList.size() < 8 )
        {
            createOneKnight(1);    
        }
        
        for ( int i=0; i<knightList.size(); i++ ){
            Knight bk = knightList.get(i);
            bk.step(deltaTime);
        }
        
    }

    public double getDistance(Knight k1, Knight k2) {
        return 0;

    }

    public double getDistance(Knight k1, double xPos, double yPos) {
        return 0;

    }
 
}
