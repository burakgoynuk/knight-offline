//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : 443-Hw1
//  @ File Name : Knight.java
//  @ Date : 08.04.2015
//  @ Author : Burak Goynuk
//
//
//package pkg443.hw1;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.Timer;



public abstract class Knight {
	public int hitPoint;
	static public Timer coolDown;
	public int score;
	public double xPos;
	public double yPos;
	public double speed;
	public Strategy strategy;
        public int knightId;
        
        public int health;
        public int normalAttack;
        public int specAttack;
        public Color colorKnight;
        
        public int attackType = 0;
        
        public Simulation simulation;
        
	public int rangedAttack( Knight target, double range, int damage ) {
            if ( target != null ){
                double distance = Strategy.findDistance(this, target);

                if ( distance <= range )
                {
                    applyDmg( target, damage );
                    return 1;
                }    
            }
            return 0;
	}
	
	public int meleeAttack( Knight target, int damage ) {
            
            if ( target != null ){
                double distance = Strategy.findDistance(this, target);

                if ( distance <= 0.01 )
                {    
                    applyDmg( target, damage ); 
                    return 1;
                }    
            }
            return 0;
	}
	
	public abstract void draw(Graphics g);
	
	public void applyDmg(Knight target, int damage) {
            int removalKnightId = 0;
            if ( target != null ){
                target.health = target.health - damage;
                
                // CHECK DEATH SITUATION
                // If death, erase it, score ++, kaurus Damage ++ 
                if ( colorKnight == Color.RED )
                {
                    simulation.kDamage += damage;
                }
                else
                {
                    simulation.eDamage += damage;
                }
                
                if ( target.health <= 0 )
                {
                    removalKnightId = target.knightId;
                    //System.out.println("Remove!");
                    //System.out.println(simulation.knightList.size());
                    if ( target.colorKnight == Color.RED )
                    {
                       //System.out.println("Target ID: " + removalKnightId );
                        int tempId;
                        for (int j = 0; j< simulation.kaurusList.size(); j++)
                        {
                            tempId = simulation.kaurusList.get(j).knightId;
                            //System.out.println("Temp ID: " + tempId);
                            if ( tempId == removalKnightId )
                            {
                                simulation.kaurusList.remove(j);
                              //  System.out.println("Deleted Kaurus:");
                                break;
                            }    
                        }    
                        
                        simulation.kKills += 1;
                        simulation.kScore += 75;
                        
                        score += 75;
                       
                    }
                    else
                    {
                        
                        int tempId;
                       // System.out.println("Attemp To Delete El Morad:");
                        for (int j = 0; j< simulation.elMoradList.size(); j++)
                        {
                            tempId = simulation.elMoradList.get(j).knightId;
                            if ( tempId == removalKnightId )
                            {
                                simulation.elMoradList.remove(j);
                              //  System.out.println("Deleted El Morad:");
                                break;
                            }    
                        }
                        
                        simulation.eKills += 1;
                        simulation.eScore += 75;
                        
                        score += 75;
                       
                    }
                    simulation.knightList.remove( target );
                }        
            }    
        }
        
        public void attack( int type ){
            if ( type == 0 )
            {
                this.doSpecAttack();
            }    
            else
            {        
                this.doNormAttack();
            }    
        }
        
        public abstract void doSpecAttack();
        public abstract void doNormAttack();
	
	public void step(double deltaTime) {
            strategy.step( this, deltaTime );
	}
        
        
}
